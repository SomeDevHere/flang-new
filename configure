#! /usr/bin/env python3

from argparse import ArgumentParser
import sys
import os

cur_dir = os.path.dirname(os.path.realpath(__file__))

class Configure:
    def __init__(self, description, delim=('@','@'), search_path=[]):
        self.argParse = ArgumentParser(description=description,
                usage='\n %(prog)s [VAR=VALUE]')
        self.argParse.add_argument("--out", nargs=1, help="Configure output path", default=None)
        self.delim = delim
        self.flags = []
        self.path_pre = {}
        self.default_empty = []
        self.args = None
        self.search_path = search_path
    def add_bool(self, name, info, default=None):
        self.flags.append(name)
        self.argParse.add_argument("--"+name, action='store_true', help=info, default=default)
    def add_opt(self, name, info, default=None, path_pre=None, default_empty=False):
        self.flags.append(name)
        if default_empty:
            self.default_empty.append(name)
        if default is None and not path_pre is None:
            self.path_pre[name] = path_pre
        self.argParse.add_argument("--"+name, nargs=1, help=info, default=default)
    def include_path(self, path, closure=None):
        include = ""
        for x in self.search_path:
            if os.path.isfile(os.path.join(x,path+".py")):
                include_file = open(os.path.join(x, path+".py"))
                include = include_file.read()
                include_file.close()
                break
        return include
    def get_replace(self, arg):
        replace = self.args[arg.replace('-','_')]
        if replace is None:
            if arg in self.default_empty:
                return ''
            if arg in self.path_pre.keys():
                ref_arg = self.args[self.path_pre[arg][0].replace('-','_')]
                if ref_arg is None and ref_arg in self.path_pre.keys():
                    ref_arg = self.get_replace(ref_arg)
                if self.path_pre[arg][1] is None:
                    replace = ref_arg
                else:
                    replace = os.path.join(ref_arg, self.path_pre[arg][1])
        return replace
    def apply_file(self, path, default_out, outfile):
        self.search_path.append(os.path.dirname(path))
        if self.args is None:
            self.args = vars(self.argParse.parse_args(sys.argv[1:]))
            for x in self.args.keys():
                if not self.args[x] is None:
                    if self.args[x] == True or self.args[x] == False:
                        self.args[x] = str(self.args[x])
                    else:
                        self.args[x] = self.args[x][0]
        out = default_out
        if not self.args['out'] is None:
            out = self.args['out']
        out = os.path.join(out, outfile)
        fi = open(path)
        content = fi.read()
        fi.close()
        for x in self.flags:
            content = content.replace(self.delim[0]+x+self.delim[1], str(self.get_replace(x)))
        content_lines = content.split('\n')
        for x in content_lines:
            if x.startswith('#include '):
                quote = []
                include = None
                closure = None
                for split in x.split(' ')[1:]:
                    if len(quote) == 0:
                            quote.append(split)
                    else:
                        if not ((quote[0].startswith("'") or quote[0].startswith('"')) and
                            not quote[-1].endswith(quote[0][0])):
                            if split == 'as':
                                include = " ".join(quote)
                                quote.clear()
                            else:
                                pass #throw error
                        else:
                            quote.append(split)
                if include is None:
                    include = " ".join(quote)
                else:
                    closure = "".join(quote)
                content = content.replace('\n'+x, '\n'+self.include_path(include, closure))
        os.makedirs(os.path.dirname(out), exist_ok=True)
        fout = open(out,'w')
        fout.write(content)
        fout.close()
        if hasattr(os, 'chmod'):
            os.chmod(out, 0o777) 
        



conf = Configure('  ')
conf.add_opt('default-target-triple', '', default_empty=True)
conf.add_opt('sysroot', '', default='/bin')
conf.add_opt('flang-new-path', '', path_pre=('sysroot','flang-new'))
conf.add_opt('clang-path', '', path_pre=('sysroot','clang'))
conf.add_opt('llc-path', '', path_pre=('sysroot','llc'))
conf.add_opt('opt-path', '', path_pre=('sysroot','opt'))
conf.add_opt('llvm-nm-path', '', path_pre=('sysroot','llvm-nm'))
conf.add_opt('llvm-objcopy-path', '', path_pre=('sysroot','llvm-objcopy'))
conf.add_bool('fpic-default', 'Whether -fpic is applied on output by default', default=True)
conf.add_opt('tool-lib', 'Path to components of the various tools', default='/lib')

conf.apply_file(os.path.join(cur_dir,'flang'), 'out', 'bin/flang')
conf.apply_file(os.path.join(cur_dir,'tools/flang_numpy_setup'), 'out', 'bin/flang_numpy_setup')
conf.apply_file(os.path.join(cur_dir,'tools/numpy_distutils_fcompiler_flang_llvm.py'), 'out', 'lib/numpy_distutils_fcompiler_flang_llvm.py')
